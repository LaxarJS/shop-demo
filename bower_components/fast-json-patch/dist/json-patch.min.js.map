{"version":3,"file":"json-patch.min.js","sources":["../src/json-patch.js"],"names":["jsonpatch","apply","tree","patches","patch","result","p","plen","length","keys","path","split","obj","t","len","_isArray","index","parseInt","arrOps","op","call","key","indexOf","replace","objOps","add","this","value","remove","move","temp","from","copy","test","JSON","stringify","_get","arr","i","splice","Array","isArray","push","exports"],"mappings":";;;;;AAKA,GAAIA,YACJ,SAAWA,GAsEP,QAASC,GAAMC,EAAMC,GAEjB,IADA,GAAkDC,GAA9CC,GAAS,EAAOC,EAAI,EAAGC,EAAOJ,EAAQK,OAC/BD,EAAJD,GAAU,CACbF,EAAQD,EAAQG,EAOhB,KAJA,GAAIG,GAAOL,EAAMM,KAAKC,MAAM,KACxBC,EAAMV,EACNW,EAAI,EACJC,EAAML,EAAKD,SAEX,GAAIO,EAASH,GAAM,CACf,GAAII,GAAQC,SAASR,EAAKI,GAAI,GAE9B,IADAA,IACIA,GAAKC,EAAK,CACVT,EAASa,EAAOd,EAAMe,IAAIC,KAAKhB,EAAOQ,EAAKI,EAAOd,EAClD,OAEJU,EAAMA,EAAII,OACP,CACH,GAAIK,GAAMZ,EAAKI,EAIf,IAHwB,IAApBQ,EAAIC,QAAQ,OACZD,EAAMA,EAAIE,QAAQ,MAAO,KAAKA,QAAQ,MAAO,MACjDV,IACIA,GAAKC,EAAK,CACVT,EAASmB,EAAOpB,EAAMe,IAAIC,KAAKhB,EAAOQ,EAAKS,EAAKnB,EAChD,OAEJU,EAAMA,EAAIS,GAGlBf,IAEJ,MAAOD,GAtGX,GA2DIU,GA3DAS,GACAC,IAAK,SAAUb,EAAKS,GAEhB,MADAT,GAAIS,GAAOK,KAAKC,OACT,GAEXC,OAAQ,SAAUhB,EAAKS,GAEnB,aADOT,GAAIS,IACJ,GAEXE,QAAS,SAAUX,EAAKS,GAEpB,MADAT,GAAIS,GAAOK,KAAKC,OACT,GAEXE,KAAM,SAAUjB,EAAKS,EAAKnB,GACtB,GAAI4B,IAASX,GAAI,OAAQT,KAAMgB,KAAKK,KAQpC,OAPA9B,GAAMC,GAAO4B,IACb7B,EAAMC,IACAiB,GAAI,SAAUT,KAAMgB,KAAKK,QAE/B9B,EAAMC,IACAiB,GAAI,MAAOT,KAAMgB,KAAKhB,KAAMiB,MAAOG,EAAKH,UAEvC,GAEXK,KAAM,SAAUpB,EAAKS,EAAKnB,GACtB,GAAI4B,IAASX,GAAI,OAAQT,KAAMgB,KAAKK,KAKpC,OAJA9B,GAAMC,GAAO4B,IACb7B,EAAMC,IACAiB,GAAI,MAAOT,KAAMgB,KAAKhB,KAAMiB,MAAOG,EAAKH,UAEvC,GAEXM,KAAM,SAAUrB,EAAKS,GACjB,MAAQa,MAAKC,UAAUvB,EAAIS,MAAUa,KAAKC,UAAUT,KAAKC,QAE7DS,KAAM,SAAUxB,EAAKS,GACjBK,KAAKC,MAAQf,EAAIS,KAIrBH,GACAO,IAAK,SAAUY,EAAKC,GAEhB,MADAD,GAAIE,OAAOD,EAAG,EAAGZ,KAAKC,QACf,GAEXC,OAAQ,SAAUS,EAAKC,GAEnB,MADAD,GAAIE,OAAOD,EAAG,IACP,GAEXf,QAAS,SAAUc,EAAKC,GAEpB,MADAD,GAAIC,GAAKZ,KAAKC,OACP,GAEXE,KAAML,EAAOK,KACbG,KAAMR,EAAOQ,KACbC,KAAMT,EAAOS,KACbG,KAAMZ,EAAOY,KAKbrB,GADAyB,MAAMC,QACKD,MAAMC,QAEN,SAAU7B,GACjB,MAAOA,GAAI8B,MAA8B,gBAAf9B,GAAIJ,QAwCtCR,EAAUC,MAAQA,GACnBD,YAAcA,eAEM,mBAAZ2C,WACPA,QAAQ1C,MAAQD,UAAUC","sourcesContent":["/*!\n* json-patch-duplex.js 0.3.8\n* (c) 2013 Joachim Wester\n* MIT license\n*/\nvar jsonpatch;\n(function (jsonpatch) {\n    var objOps = {\n        add: function (obj, key) {\n            obj[key] = this.value;\n            return true;\n        },\n        remove: function (obj, key) {\n            delete obj[key];\n            return true;\n        },\n        replace: function (obj, key) {\n            obj[key] = this.value;\n            return true;\n        },\n        move: function (obj, key, tree) {\n            var temp = { op: \"_get\", path: this.from };\n            apply(tree, [temp]);\n            apply(tree, [\n                { op: \"remove\", path: this.from }\n            ]);\n            apply(tree, [\n                { op: \"add\", path: this.path, value: temp.value }\n            ]);\n            return true;\n        },\n        copy: function (obj, key, tree) {\n            var temp = { op: \"_get\", path: this.from };\n            apply(tree, [temp]);\n            apply(tree, [\n                { op: \"add\", path: this.path, value: temp.value }\n            ]);\n            return true;\n        },\n        test: function (obj, key) {\n            return (JSON.stringify(obj[key]) === JSON.stringify(this.value));\n        },\n        _get: function (obj, key) {\n            this.value = obj[key];\n        }\n    };\n\n    var arrOps = {\n        add: function (arr, i) {\n            arr.splice(i, 0, this.value);\n            return true;\n        },\n        remove: function (arr, i) {\n            arr.splice(i, 1);\n            return true;\n        },\n        replace: function (arr, i) {\n            arr[i] = this.value;\n            return true;\n        },\n        move: objOps.move,\n        copy: objOps.copy,\n        test: objOps.test,\n        _get: objOps._get\n    };\n\n    var _isArray;\n    if (Array.isArray) {\n        _isArray = Array.isArray;\n    } else {\n        _isArray = function (obj) {\n            return obj.push && typeof obj.length === 'number';\n        };\n    }\n\n    /// Apply a json-patch operation on an object tree\n    function apply(tree, patches) {\n        var result = false, p = 0, plen = patches.length, patch;\n        while (p < plen) {\n            patch = patches[p];\n\n            // Find the object\n            var keys = patch.path.split('/');\n            var obj = tree;\n            var t = 1;\n            var len = keys.length;\n            while (true) {\n                if (_isArray(obj)) {\n                    var index = parseInt(keys[t], 10);\n                    t++;\n                    if (t >= len) {\n                        result = arrOps[patch.op].call(patch, obj, index, tree); // Apply patch\n                        break;\n                    }\n                    obj = obj[index];\n                } else {\n                    var key = keys[t];\n                    if (key.indexOf('~') != -1)\n                        key = key.replace(/~1/g, '/').replace(/~0/g, '~'); // escape chars\n                    t++;\n                    if (t >= len) {\n                        result = objOps[patch.op].call(patch, obj, key, tree); // Apply patch\n                        break;\n                    }\n                    obj = obj[key];\n                }\n            }\n            p++;\n        }\n        return result;\n    }\n    jsonpatch.apply = apply;\n})(jsonpatch || (jsonpatch = {}));\n\nif (typeof exports !== \"undefined\") {\n    exports.apply = jsonpatch.apply;\n}\n"]}