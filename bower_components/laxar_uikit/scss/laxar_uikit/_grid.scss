
@mixin ax-custom-grid($columns, $column-width, $gutter-width) {

   #ax-grid-visualization {
      @include ax-application;
      background: url(../images/grid_pattern.png) ($gutter-width / 2) top;
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 100;
      opacity: 0.6;
   }

   .col {
      @extend %col-lg-left;
      margin-left: $gutter-width;

      // To avoid collapsing width of an empty col
      min-height: 1px;

      &.first,
      &:first-child {
         margin-left: 0;
      }
   }

   [class*="col-lg-push"],
   [class*="col-lg-pull"],
   [class*="col-lg-offset"] {
      position:relative;
   }

   // Sometimes (f.e. CommandBarWidget) we want to hide an area
   .col-lg-0 {
      display: none !important;
      width: 0 !important;
   }

   @for $i from 1 through $columns {
      .col-lg-#{$i} {
         width: (($column-width * $i) + ($gutter-width * ($i - 1)));
      }
   }

   @for $i from 1 through $columns - 1 {
      .col-lg-push-#{$i} {
         left: ($column-width + $gutter-width) * $i;
      }
   }

   @for $i from 1 through $columns - 1 {
      .col-lg-pull-#{$i} {
         right: ($column-width + $gutter-width) * $i;
      }
   }

   @for $i from 1 through $columns - 1 {
      .col-lg-offset-#{$i} {
         margin-left: ($column-width + $gutter-width) * $i;
      }
   }
}

@include ax-custom-grid( $ax-grid-columns, $ax-grid-column-width, $ax-grid-gutter-width );

// Sometimes we want regardless of the popup/popover width a two column layout.
// To simplify the process you can apply this css class to both columns without the knowledge
// of the exact popup/popover dimensions.
.ax-col-50-percent {
   width: 50%;

   &:first-child { padding-right: $ax-grid-gutter-width / 2; };
   &:last-child  { padding-left:  $ax-grid-gutter-width / 2; };
}

.row {
   // display: table;
   // width: 100%;
   @include clearfix;
}

// Additional space between two grid rows
// <div class="row"></div>
// <div class="row ax-row-space-top"></div>

.ax-row-space-top {
   margin-top: $ax-row-space-top;
}

%col-lg-left {
   float: left;
}

// IE8 don't understand "last-child", for this reason the declaration has to stand alone.

.col {
   &:last-child {
      float: right;
      margin-left: 0;
   }
}
.col {
   &.last {
      float: right;
      margin-left: 0;
   }
}

.col {
   &:first-child:last-child {
      float: none;
   }
}
.col {
   &.first.last {
      float: none;
   }
}

//
// Vertical alignment of content in a col
// -----------------------------------------------------------------------------------------------------------

// <div class="row ax-align-col-content-vertical-middle">
//    <div class="col-lg-7 first"></div>
//    <div class="col-lg-3"></div>
//    <div class="col-lg-2 last"></div>
// </div>

%ax-align-cols {

   display: table;

   > .col {
      float: none !important;

      display: table-cell;
      vertical-align: middle;

      box-sizing: content-box;

      padding: 0 ($ax-grid-gutter-width / 2);

      &.first,
      &:first-child {
         padding-left: 0 !important;
      }

      // IE8 don't understand "last-child", for this reason the declaration has to stand alone.
      &.last {
         text-align: right;
         padding-right: 0 !important;
      }
      &:last-child {
         text-align: right;
         padding-right: 0 !important;
      }
   }
}

.ax-align-col-content-vertical-middle {
   @extend %ax-align-cols;

   > .col {
      vertical-align: middle;
   }
}
.ax-align-col-content-vertical-bottom {
   @extend %ax-align-cols;

   > .col {
      vertical-align: bottom;
   }
}

//
// Indent content of columns
// -----------------------------------------------------------------------------------------------------------

// <div class="ax-indent-first-last-col">
//    <div class="row">
//       <div class="col col-lg-6 first">
//          ...
//       </div>
//       <div class="col col-lg-6 last">
//          ...
//       </div>
//    </div>
// </div>

@mixin calculate-indent ( $ax-indent-level: 1 ) {
   &.first,
   &:first-child {
      margin-left:  floor( $ax-grid-gutter-width / 2 ) * ( -1 );
      padding-left: floor( $ax-grid-gutter-width / 2 ) * $ax-indent-level;
   }

   // IE8 don't understand "last-child", for this reason the declaration has to stand alone.
   &.last {
      margin-right:  floor( $ax-grid-gutter-width / 2 ) * ( -1 );
      padding-right: floor( $ax-grid-gutter-width / 2 ) * $ax-indent-level;
   }
   &:last-child {
      margin-right:  floor( $ax-grid-gutter-width / 2 ) * ( -1 );
      padding-right: floor( $ax-grid-gutter-width / 2 ) * $ax-indent-level;
   }
}

.ax-indent-first-last-col .col {
   @include calculate-indent;
}

.ax-indent-first-last-col-2x .col {
   @include calculate-indent( 2 );
}

.ax-indent-first-last-col-3x .col {
   @include calculate-indent( 3 );
}

//
// Increased space between columns (IE9+)
// -----------------------------------------------------------------------------------------------------------

.ax-increased-space-between-cols .col {
   &.first,
   &:first-child {
      padding-right: floor( $ax-grid-gutter-width / 2 );
   }

   & + .col:not(:last-child) {
      padding-left: floor( $ax-grid-gutter-width / 2 );
      padding-right: floor( $ax-grid-gutter-width / 2 );
   }

   &.last,
   &:last-child {
      padding-left: floor( $ax-grid-gutter-width / 2 );
   }
}

//
// Nested layouts
// -----------------------------------------------------------------------------------------------------------

.col:not(.first) .col.first,
.col:not(:first-child) .col:first-child {
      margin-left: 0;
      padding-left: 0;
}

.col:not(.last) .col.last {
      margin-right: 0;
      padding-right: 0;
}
.col:not(:last-child) .col:last-child {
      margin-right: 0;
      padding-right: 0;
}
